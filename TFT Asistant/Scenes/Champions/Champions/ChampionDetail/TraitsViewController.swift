//
//  TraitsViewController.swift
//  TFT Asistant
//
//  Created by erdem on 28.10.2019.
//  Copyright (c) 2019 Erdem Isguder. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TraitsDisplayLogic: class
{
    func displayTraits(viewModel: [Traits.TraitViewModel])
}

class TraitsViewController: UIViewController, TraitsDisplayLogic
{
    var interactor: TraitsBusinessLogic?
    var router: (NSObjectProtocol & TraitsRoutingLogic & TraitsDataPassing)?
    
    var traitsViewModels: [Traits.TraitViewModel]?
    
    @IBOutlet weak var traitsTableView: UITableView!
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = TraitsInteractor()
        let presenter = TraitsPresenter()
        let router = TraitsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.setupTableView()
        interactor?.getTraits(request: Traits.GetAllTraits.Request())
    }
    
    private func setupTableView(){
        traitsTableView.delegate = self
        traitsTableView.dataSource = self
        traitsTableView.register(UINib(nibName: "TraitsTableViewCell", bundle: nil), forCellReuseIdentifier: "TraitsTableViewCell")
        traitsTableView.estimatedRowHeight = 44
        traitsTableView.rowHeight = UITableView.automaticDimension
    }
    
    // MARK: Display
    
    func displayTraits(viewModel: [Traits.TraitViewModel]) {
        self.traitsViewModels = viewModel
        traitsTableView.reloadData()
    }
}

extension TraitsViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.traitsViewModels?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "TraitsTableViewCell") as! TraitsTableViewCell
        if let viewModel = traitsViewModels?[indexPath.row] {
            cell.viewModel = TraitsCellViewModel(traitImageName: viewModel.name, traitName: viewModel.name, traitDescription: viewModel.description, bonuses: viewModel.bonuses)
            cell.layoutIfNeeded()
        }
        
        return cell
    }
}
