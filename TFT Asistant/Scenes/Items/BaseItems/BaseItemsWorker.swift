//
//  BaseItemsWorker.swift
//  TFT Asistant
//
//  Created by erdem on 6.10.2019.
//  Copyright (c) 2019 Erdem Isguder. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Domain

class BaseItemsWorker
{
    let itemsUseCase: ItemsUseCase
    
    init(itemsUseCase: ItemsUseCase) {
        self.itemsUseCase = itemsUseCase
    }
    
    func getBaseItems() -> BaseItems.GetBaseItems.Response{
        var response = BaseItems.GetBaseItems.Response(items: nil)
        
        guard let baseItems = itemsUseCase.getItems() else{
            return response
        }
        
        response.items = baseItems.filter({
            $0.buildsFrom == nil
        })
        
        return response
    }
    
    private func getCombinedItems() -> [Item]?{
        return itemsUseCase.getItems()?.filter({$0.buildsFrom != nil})
    }
    
    func getBuildableItems(request: BaseItems.GetCombinedItems.Request) -> BaseItems.GetCombinedItems.Response{
        let baseItems = getBaseItems().items
        guard let combinedItemsFromRequestItem = getCombinedItems()?.filter({ $0.buildsFrom?.contains(request.key) ?? false}) else{
            return BaseItems.GetCombinedItems.Response(items: nil)
        }
        for index in combinedItemsFromRequestItem.indices{
            combinedItemsFromRequestItem[index].stats = [ItemStat]()
            var item = combinedItemsFromRequestItem[index]
            item.buildsFrom?.forEach({ base in
                if let baseItem = baseItems?.first(where: {
                    $0.key == base
                }){
                    if item.stats == nil{
                        item.stats = [ItemStat]()
                    }
                        
                    if item.stats != nil && baseItem.stats != nil {
                        item.stats! += baseItem.stats!
                    }
                }
            })
        }
    
        return BaseItems.GetCombinedItems.Response(items: combinedItemsFromRequestItem)
    }
}
