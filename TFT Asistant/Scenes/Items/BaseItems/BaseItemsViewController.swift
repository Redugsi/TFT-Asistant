//
//  BaseItemsViewController.swift
//  TFT Asistant
//
//  Created by erdem on 6.10.2019.
//  Copyright (c) 2019 Erdem Isguder. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BaseItemsDisplayLogic: class
{
    func displayBaseItems(baseItems: BaseItems.GetBaseItems.BaseItemsViewModel)
    func displayBuildableItems(buildableItems: [ItemCombinationDetailViewModel]?)
}

class BaseItemsViewController: UIViewController, BaseItemsDisplayLogic
{
    var baseItemsViewModel: BaseItems.GetBaseItems.BaseItemsViewModel?
    var combinedItemsViewModel: [ItemCombinationDetailViewModel]?

    var interactor: BaseItemsBusinessLogic?
    var router: (NSObjectProtocol & BaseItemsRoutingLogic & BaseItemsDataPassing)?

    
    @IBOutlet weak var itemsCollectionView: UICollectionView!
    @IBOutlet weak var combonedTableView: UITableView!
    @IBOutlet weak var collectionHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var itemNameLabel: UILabel!
    @IBOutlet weak var itemBonusLabel: UILabel!
    
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = BaseItemsInteractor()
    let presenter = BaseItemsPresenter()
    let router = BaseItemsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupItemCollectionView()
    setupCombinedTableView()
    interactor?.getBaseItems(request: BaseItems.GetBaseItems.Request())
  }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        setupCellSize()
    }
    
    private func setupItemCollectionView(){
        itemsCollectionView.delegate = self
        itemsCollectionView.dataSource = self
        
        let nib = UINib(nibName: "SquareCollectionViewCell", bundle: nil)
        itemsCollectionView.register(nib, forCellWithReuseIdentifier: String(describing: SquareCollectionViewCell.self))
    }
    
    private func setupCombinedTableView(){
        combonedTableView.delegate = self
        combonedTableView.dataSource = self
        
        let nib = UINib(nibName: "CombinedItemDetailTableViewCell", bundle: nil)
        combonedTableView.register(nib, forCellReuseIdentifier: "CombinedItemDetailTableViewCell")
    }
    
    private func setupCellSize(){
        let collectionFlowLayout = itemsCollectionView.collectionViewLayout as! UICollectionViewFlowLayout
        
        let numberOfItemsInRow: CGFloat = 6
        let lineSpacing: CGFloat = 15
        let itemSpacing: CGFloat = 15
        
        let width = (itemsCollectionView.frame.width - (numberOfItemsInRow - 1) * itemSpacing) / numberOfItemsInRow
        
        collectionFlowLayout.itemSize = CGSize(width: width, height: width)
        collectionFlowLayout.minimumLineSpacing = lineSpacing
        collectionFlowLayout.minimumInteritemSpacing = itemSpacing
        collectionFlowLayout.sectionInset = UIEdgeInsets(top: 0, left: 15, bottom: 0, right: 15)
        
        collectionHeightConstraint.constant = width
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    func displayBaseItems(baseItems: BaseItems.GetBaseItems.BaseItemsViewModel) {
        self.baseItemsViewModel = baseItems
        itemsCollectionView.reloadData()
        let indexPath = IndexPath(item: 0, section: 0)
        itemsCollectionView.selectItem(at: indexPath, animated: true, scrollPosition: .left)
        baseItemDidSelect(indexPath: indexPath)
    }
    
    func displayBuildableItems(buildableItems: [ItemCombinationDetailViewModel]?) {
        self.combinedItemsViewModel = buildableItems
        
        UIView.transition(with: self.combonedTableView,
                          duration: 0.35,
                          options: .transitionCrossDissolve,
                          animations: { [weak self] in
                            self?.combonedTableView.reloadData()
                            self?.combonedTableView.scrollToRow(at: IndexPath(row: 0, section: 0), at: .top, animated: false)
        })

    }
    
    private func baseItemDidSelect(indexPath: IndexPath){
        guard let selectedItem = baseItemsViewModel?.viewModels?[indexPath.row] else{
            return
        }

        if let key = selectedItem.key{
            interactor?.getBuildableItems(request: BaseItems.GetCombinedItems.Request(key: key))
        }
        
        updateItemLabels(baseItemViewModel: selectedItem)
    }
    
    private func updateItemLabels(baseItemViewModel: BaseItems.GetBaseItems.BaseItemViewModel){
        UIView.transition(with: self.itemNameLabel,
                          duration: 0.35,
                          options: .transitionCrossDissolve,
                          animations: {[weak self] in
                            self?.itemNameLabel.text = baseItemViewModel.name
        })
        
        UIView.transition(with: self.itemBonusLabel,
                          duration: 0.35,
                          options: .transitionCrossDissolve,
                          animations: {[weak self] in
                            self?.itemBonusLabel.text = baseItemViewModel.bonus
        })
    }
}

extension BaseItemsViewController: UICollectionViewDelegate, UICollectionViewDataSource{
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return baseItemsViewModel?.viewModels?.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: SquareCollectionViewCell.self), for: indexPath) as! SquareCollectionViewCell
        
        if let item = baseItemsViewModel?.viewModels?[indexPath.row], let key = item.key{
            cell.imageView.image = UIImage(named: key)
        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        self.baseItemDidSelect(indexPath: indexPath)
    }
}

extension BaseItemsViewController: UITableViewDataSource, UITableViewDelegate{
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return combinedItemsViewModel?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CombinedItemDetailTableViewCell") as! CombinedItemDetailTableViewCell
        let detailViewModel = combinedItemsViewModel?[indexPath.row]
        cell.bind(viewModel: detailViewModel)
        return cell
    }
}
