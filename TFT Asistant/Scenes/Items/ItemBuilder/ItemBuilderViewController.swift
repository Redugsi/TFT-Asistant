//
//  ItemBuilderViewController.swift
//  TFT Asistant
//
//  Created by erdem on 7.10.2019.
//  Copyright (c) 2019 Erdem Isguder. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ItemBuilderDisplayLogic: class
{
    func displayBaseItems(baseItems: ItemModels.BaseItemsViewModel)
}

class ItemBuilderViewController: UIViewController, ItemBuilderDisplayLogic
{
    var interactor: ItemBuilderBusinessLogic?
    var router: (NSObjectProtocol & ItemBuilderRoutingLogic & ItemBuilderDataPassing)?
    
    var baseItemsViewModel: ItemModels.BaseItemsViewModel?


    //MARK: View bindingds
    
    @IBOutlet weak var baseItemsCollectionView: UICollectionView!
    @IBOutlet weak var baseItemsHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var baseItemsWidthConstraint: NSLayoutConstraint!
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ItemBuilderInteractor()
    let presenter = ItemBuilderPresenter()
    let router = ItemBuilderRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupBaseItemsCollectionView()
        interactor?.getBaseItems(request: ItemBuilder.GetBaseItems.Request())
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        setupBaseItemsCellSize()
    }
    
    private func setupBaseItemsCollectionView(){
        self.baseItemsCollectionView.delegate = self
        self.baseItemsCollectionView.dataSource = self
        
        let nib = UINib(nibName: "MultiSelectableCollectionViewCell", bundle: nil)
        baseItemsCollectionView.register(nib, forCellWithReuseIdentifier: String(describing: MultiSelectableCollectionViewCell.self))
    }
    
    private func setupBaseItemsCellSize(){
        let collectionFlowLayout = baseItemsCollectionView.collectionViewLayout as! UICollectionViewFlowLayout
        
        let numberOfItemsInRow: CGFloat = 6
        let lineSpacing: CGFloat = 15
        let itemSpacing: CGFloat = 15
        
        let width = (view.frame.width - (numberOfItemsInRow - 1) * itemSpacing) / numberOfItemsInRow
        
        collectionFlowLayout.itemSize = CGSize(width: width, height: width)
        collectionFlowLayout.minimumLineSpacing = lineSpacing
        collectionFlowLayout.minimumInteritemSpacing = itemSpacing
        
        let wantedColumnItemCount: CGFloat = 5
        let wantedRowItemCount: CGFloat = 2
        
        baseItemsWidthConstraint.constant = (width * wantedColumnItemCount) + (itemSpacing * (wantedColumnItemCount - 1))
        baseItemsHeightConstraint.constant = (width * wantedRowItemCount) + (lineSpacing * (wantedRowItemCount - 1))
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    func displayBaseItems(baseItems: ItemModels.BaseItemsViewModel) {
        baseItemsViewModel = baseItems
        baseItemsCollectionView.reloadData()
    }
}

extension ItemBuilderViewController: UICollectionViewDataSource, UICollectionViewDelegate{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return baseItemsViewModel?.viewModels?.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "MultiSelectableCollectionViewCell", for: indexPath) as! MultiSelectableCollectionViewCell
        
        if let item = baseItemsViewModel?.viewModels?[indexPath.row], let key = item.key{
            let cellViewModel = MultiSelectableCollectionViewModel(imageName: key)
            cell.viewModel = cellViewModel
        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let cell = collectionView.cellForItem(at: indexPath) as! MultiSelectableCollectionViewCell
        let isSelected = cell.didSelect()
        if let clickedItem = baseItemsViewModel?.viewModels?[indexPath.row],
            let itemkey = clickedItem.key{
            interactor?.chooseItem(isSelected: isSelected, key: itemkey)
        }
    }
}
