//
//  ModalViewController.swift
//  TFT Asistant
//
//  Created by erdem on 26.10.2019.
//  Copyright (c) 2019 Erdem Isguder. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ModalDisplayLogic: class
{
    func displaySomething(viewModel: Modal.Something.ViewModel)
}

class ModalViewController: UIViewController, ModalDisplayLogic
{
    var interactor: ModalBusinessLogic?
    var router: (NSObjectProtocol & ModalRoutingLogic & ModalDataPassing)?
    
    enum State{
        case expanded
        case collapsed
    }
    
    var visualEffectView: UIVisualEffectView!
    @IBOutlet weak var modalView: UIView!
    @IBOutlet weak var stackView: UIStackView!
    @IBOutlet weak var thumbView: UIView!
    // MARK: Variables
    var modalVisible = false
    var nextState: State{
        return modalVisible ? .collapsed : .expanded
    }
    
    var runningAnimations = [UIViewPropertyAnimator]()
    var animationProgressWhenInterrupdated: CGFloat = 0
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ModalInteractor()
        let presenter = ModalPresenter()
        let router = ModalRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupView()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        self.modalView.frame.origin.y = self.view.frame.height - self.thumbView.frame.height
        self.animateModalOnLoad(state: self.nextState, duration: 0.9)
        roundCorners()
    }
    
    func setupView(){
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(handleModalTap(recognizer:)))
        let panGestureRecognizer = UIPanGestureRecognizer(target: self, action: #selector(handleModalPan(recognizer:)))
        modalView.addGestureRecognizer(tapGestureRecognizer)
        modalView.addGestureRecognizer(panGestureRecognizer)
        
        visualEffectView = UIVisualEffectView()
        visualEffectView.frame = self.view.frame

        self.view.insertSubview(visualEffectView, at: 0)
    }
    
    private func roundCorners(){
        thumbView.roundCorners(corners: [.topLeft, .topRight], radius: 16.0)
    }
    
    // MARK: Gestures
    @objc
    func handleModalTap(recognizer: UITapGestureRecognizer){
        
    }
    
    @objc
    func handleModalPan(recognizer: UIPanGestureRecognizer){
        switch recognizer.state {
        case .began:
            startInteractiveTransition(state: nextState, duration: 0.9)
        case .changed:
            let translation = recognizer.translation(in: self.thumbView)
            var fractionComplete = translation.y / self.modalView.frame.height
            fractionComplete = modalVisible ? fractionComplete : -fractionComplete
            updateInteractiveTransition(fractionComplated: fractionComplete)
        case .ended:
            continueInteractiveTransition()
        default:
            break
        }
    }
    // MARK: Transitions
    private func animateTransitionIfNeeded(state: State, duration: TimeInterval){
        if runningAnimations.isEmpty{
            let frameAnimator = UIViewPropertyAnimator(duration: duration, dampingRatio: 1, animations: {
                switch state{
                case .expanded:
                    self.modalView.frame.origin.y = self.view.frame.height - self.modalView.frame.height
                case .collapsed:
                    self.modalView.frame.origin.y = self.view.frame.height - self.thumbView.frame.height
                }
            })
            
            frameAnimator.addCompletion { _ in
                self.modalVisible = !self.modalVisible
                self.runningAnimations.removeAll()
            }
            
            frameAnimator.startAnimation()
            runningAnimations.append(frameAnimator)
            
            let blurAnimator = UIViewPropertyAnimator(duration: duration, dampingRatio: 1, animations: {
                switch state{
                case .expanded:
                    self.visualEffectView.effect = UIBlurEffect(style: .extraLight)
                case .collapsed:
                    self.visualEffectView.effect = nil
                }
            })
            
            blurAnimator.startAnimation()
            runningAnimations.append(blurAnimator)
        }
    }
    
    private func animateModalOnLoad(state: State, duration: TimeInterval){
        if runningAnimations.isEmpty{
            animateTransitionIfNeeded(state: state, duration: duration)
        }
    }
    
    private func startInteractiveTransition(state: State, duration: TimeInterval){
        if runningAnimations.isEmpty{
            animateTransitionIfNeeded(state: state, duration: duration)
        }
        
        for animator in runningAnimations{
            animator.pauseAnimation()
            animationProgressWhenInterrupdated = animator.fractionComplete
        }
    }
    
    private func updateInteractiveTransition(fractionComplated: CGFloat){
        for animator in runningAnimations{
            animator.fractionComplete = fractionComplated + animationProgressWhenInterrupdated
        }
    }
    
    private func continueInteractiveTransition(){
        for animator in runningAnimations{
            animator.continueAnimation(withTimingParameters: nil, durationFactor: 0)
        }
    }
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Modal.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Modal.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

extension UIView {
    func roundCorners(corners: UIRectCorner, radius: CGFloat) {
        let path = UIBezierPath(roundedRect: bounds, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))
        let mask = CAShapeLayer()
        mask.path = path.cgPath
        layer.mask = mask
    }
}
