//
//  ModalViewController.swift
//  TFT Asistant
//
//  Created by erdem on 26.10.2019.
//  Copyright (c) 2019 Erdem Isguder. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ModalDisplayLogic: class
{
    func displaySomething(viewModel: Modal.Something.ViewModel)
    func displayDetailView(detailView: UIView)
}

class ModalViewController: UIViewController, ModalDisplayLogic
{
    var interactor: ModalBusinessLogic?
    var router: (NSObjectProtocol & ModalRoutingLogic & ModalDataPassing)?
    
    enum State{
        case expanded
        case collapsed
    }
    
    @IBOutlet weak var championDetailView: ChampionDetailView!
    var visualEffectView: UIVisualEffectView!
    @IBOutlet weak var modalView: UIView!
    @IBOutlet weak var stackView: UIStackView!
    @IBOutlet weak var thumbView: UIView!
    // MARK: Variables
    var modalVisible = false
    var nextState: State{
        return modalVisible ? .collapsed : .expanded
    }
    
    var runningAnimations = [UIViewPropertyAnimator]()
    var animationProgressWhenInterrupdated: CGFloat = 0
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ModalInteractor()
        let presenter = ModalPresenter()
        let router = ModalRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupView()
        interactor?.sendDisplayView()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        self.modalView.frame.origin.y = self.view.frame.height - self.thumbView.frame.height
        self.animateModalOnLoad(state: self.nextState, duration: 0.9)
    }
    
    func setupView(){
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(handleModalTap(recognizer:)))
        let panGestureRecognizer = UIPanGestureRecognizer(target: self, action: #selector(handleModalPan(recognizer:)))
        thumbView.addGestureRecognizer(tapGestureRecognizer)
        modalView.addGestureRecognizer(panGestureRecognizer)
        
        visualEffectView = UIVisualEffectView()
        visualEffectView.frame = self.view.frame

        self.view.insertSubview(visualEffectView, at: 0)
                
    }
        
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!

    
    func doSomething()
    {
        let request = Modal.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Modal.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func displayDetailView(detailView: UIView) {
        self.stackView.addSubview(detailView)
    }
}
